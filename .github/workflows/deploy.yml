name: Build and Deploy to gh-pages.

on:
    push:
        branches:
            - 'main'

    pull_request:
        branches:
            - '**'

concurrency:
    group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
    cancel-in-progress: true

jobs:
    build:
        name: Build and Test
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repo
              uses: actions/checkout@v3
#run: echo "BRANCH_NAME=$(echo ${{ github.head_ref || github.ref_name }} | sed -r 's/[/]+/-/g')" >> $GITHUB_ENV
            - name: Define branch name
              run: | # echo "BRANCH_NAME=$(echo ${{ github.event.head_commit.message }}#*${{ github.event.repository.name }})" >> $GITHUB_ENV
                  commit_msg=${{ github.event.head_commit.message }}
                  repo_name=${{ github.event.repository.name }}
                  echo "BRANCH_NAME=${commit_msg#*$repo_name/}" >> $GITHUB_ENV
            - name: test
              run: echo "$BRANCH_NAME"

            - name: Dump GitHub context
              env:
                 GITHUB_CONTEXT: ${{ toJSON(github) }}
              run: echo "$GITHUB_CONTEXT"

            -   name: Print info
                run: echo "'${{ github.ref_name }}' was pushed by '${{ github.event.pusher.name }}'"

            - name: lol
              run: echo "${GITHUB_REF#refs/heads/}"

            - uses: FranzDiebold/github-env-vars-action@v2
            - name: Print environment variables
              run: |
                  echo "CI_REPOSITORY_SLUG=$CI_REPOSITORY_SLUG"
                  echo "CI_REPOSITORY_OWNER=$CI_REPOSITORY_OWNER"
                  echo "CI_REPOSITORY_OWNER_SLUG=$CI_REPOSITORY_OWNER_SLUG"
                  echo "CI_REPOSITORY_NAME=$CI_REPOSITORY_NAME"
                  echo "CI_REPOSITORY_NAME_SLUG=$CI_REPOSITORY_NAME_SLUG"
                  echo "CI_REPOSITORY=$CI_REPOSITORY"
                  echo "CI_REF_SLUG=$CI_REF_SLUG"
                  echo "CI_ACTION_REF_NAME=$CI_ACTION_REF_NAME"
                  echo "CI_ACTION_REF_NAME_SLUG=$CI_ACTION_REF_NAME_SLUG"
                  echo "CI_REF_NAME=$CI_REF_NAME"
                  echo "CI_REF_NAME_SLUG=$CI_REF_NAME_SLUG"
                  echo "CI_REF=$CI_REF"
                  echo "CI_HEAD_REF_SLUG=$CI_HEAD_REF_SLUG"
                  echo "CI_HEAD_REF=$CI_HEAD_REF"
                  echo "CI_BASE_REF_SLUG=$CI_BASE_REF_SLUG"
                  echo "CI_BASE_REF=$CI_BASE_REF"
                  echo "CI_SHA_SHORT=$CI_SHA_SHORT"
                  echo "CI_SHA=$CI_SHA"
                  echo "CI_PR_SHA_SHORT=$CI_PR_SHA_SHORT"
                  echo "CI_PR_SHA=$CI_PR_SHA"
                  echo "CI_PR_NUMBER=$CI_PR_NUMBER"
                  echo "CI_PR_ID=$CI_PR_ID"
                  echo "CI_PR_TITLE=$CI_PR_TITLE"
                  echo "CI_PR_DESCRIPTION=$CI_PR_DESCRIPTION"
                  echo "CI_ACTOR=$CI_ACTOR"
                  echo "CI_EVENT_NAME=$CI_EVENT_NAME"
                  echo "CI_RUN_ID=$CI_RUN_ID"
                  echo "CI_RUN_NUMBER=$CI_RUN_NUMBER"
                  echo "CI_WORKFLOW=$CI_WORKFLOW"
                  echo "CI_ACTION=$CI_ACTION"

            - name: Setup Node
              uses: actions/setup-node@v3
              with:
                  node-version: 14.19.1

            - name: Install deps
              uses: borales/actions-yarn@v4
              with:
                  cmd: install

            - name: Run units
              uses: borales/actions-yarn@v4
              with:
                  cmd: test

            - name: Build production bundle
              uses: borales/actions-yarn@v4
              with:
                  cmd: build

            - name: Upload artifact
              uses: actions/upload-artifact@v3
              with:
                  name: production-build
                  path: ./dist
                  if-no-files-found: error

    deploy:
        name: Deploy to staging
        needs: build

        runs-on: ubuntu-latest
        steps:
            # -   name: Print info
            #     run: echo "'${{ github.ref_name }}' was pushed by '${{ github.event.pusher.name }}'"

            # - name: Check
            #   run: ls -a

            - name: Download artifact
              uses: actions/download-artifact@master
              with:
                   name: production-build
                   path: .

            - name: Specify branch name
              run: echo "BRANCH_NAME=$(echo ${{ github.head_ref || github.ref_name }} | sed -r 's/[/]+/-/g')" >> $GITHUB_ENV
# sed 's/.*Modeline //'
            # -   name: Setup Environment (PR)
            #     if: ${{ github.event_name == 'pull_request' }}
            #     shell: bash
            #     run: |
            #         echo "LAST_COMMIT_SHA=${{ github.event.pull_request.head.sha }}" >> ${GITHUB_ENV}
            # -   name: Setup Environment (Push)
            #     if: ${{ github.event_name == 'push' }}
            #     shell: bash
            #     run: |
            #         echo "LAST_COMMIT_SHA=${GITHUB_SHA}" >> ${GITHUB_ENV}

            - name: Define destination folder
              uses: haya14busa/action-cond@v1
              id: destinationFolder
              with:
                  cond: ${{ github.ref == 'refs/heads/main' }}
                  if_true: '.'
                  if_false: ${{ env.BRANCH_NAME }}

            - name: Check
              run: ls -a

            - name: Deploy to github pages
              uses: peaceiris/actions-gh-pages@v3
              with:
                  github_token: ${{ secrets.GITHUB_TOKEN }}
                  publish_dir: .
                  destination_dir: ${{ steps.destinationFolder.outputs.value }} #-${{ env.LAST_COMMIT_SHA }}
                  publish_branch: staging
                  keep_files: true

    clean:
        name: Delete folder after deploy
        if: github.ref == 'refs/heads/main'
        needs: deploy
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repo
              uses: actions/checkout@v3
              with:
                  ref: staging

            # - name: Print info
            #   run: echo "'${{ github.ref_name }}' was pushed by '${{ github.event.pusher.name }}'"

            #- name: Specify branch name
            #  run: echo "BRANCH_NAME=$(echo ${{ github.head_ref }} | sed -r 's/[/]+/-/g')" >> $GITHUB_ENV
            - name: Define branch name
              run: echo "BRANCH_NAME=$(echo ${{ github.event.head_commit.message }}#*${{ github.event.repository.name }})" >> $GITHUB_ENV


            #- name: Setup Environment (PR)
            #  if: ${{ github.event_name == 'pull_request' }}
            #  shell: bash
            #  run: |
            #      echo "LAST_COMMIT_SHA=${{ github.event.pull_request.head.sha }}" >> ${GITHUB_ENV}

            #-   name: Setup Environment (Push)
            #    if: ${{ github.event_name == 'push' }}
            #    shell: bash
            #    run: |
            #        echo "LAST_COMMIT_SHA=${GITHUB_SHA}" >> ${GITHUB_ENV}
            # token=${text##* authentication_token = \'}

            - name: Check
              run: ls -a

            - name: delete merged build folder
              run: rm -rf ${{ env.BRANCH_NAME }}
              # run: find . -name '*-${{ env.BRANCH_NAME }}' -exec rm -rf {} +


            - name: Check
              run: ls -a

            - name: commit success
              run: |
                  git config --global user.email "email@gmail.com"
                  git config --global user.name "github actions"
                  git add .
                  git commit -m "chore: clean repo"
                  git push